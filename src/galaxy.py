#!/usr/bin/env python3
"""
{{SERVICE_NAME}}
{{DESCRIPTION}}
Generated by GX Genesis | Team: {{TEAM}} | Tier: {{TIER}}
"""
from fastapi import FastAPI
import uvicorn
import os
from datetime import datetime
from typing import Dict, Any

app = FastAPI(
    title="{{SERVICE_NAME}}",
    description="{{DESCRIPTION}}",
    version="1.0.0"
)

# Service metadata
SERVICE_NAME = "{{SERVICE_NAME}}"
SERVICE_TIER = "{{TIER}}" 
SERVICE_TEAM = "{{TEAM}}"

# Galaxy Config - Dynamic dependency discovery
class GalaxyConfig:
    def __init__(self):
        self.deps = self._load_dependencies()
    
    def _load_dependencies(self) -> Dict[str, Any]:
        """Load all dependencies from environment variables using GALAXY_DEPS array"""
        deps_config = {}
        
        # Get the list of dependency service names
        galaxy_deps = os.environ.get('GALAXY_DEPS', '').strip()
        if not galaxy_deps:
            return deps_config
        
        # Parse the comma-separated dependency names
        dep_names = [name.strip() for name in galaxy_deps.split(',') if name.strip()]
        
        for dep_name in dep_names:
            # Convert service name to environment variable format
            env_prefix = dep_name.upper().replace('-', '_')
            
            # Load dependency configuration from environment
            dep_config = {
                'name': dep_name,
                'url': os.environ.get(f'{env_prefix}_SERVICE_URL', ''),
                'host': os.environ.get(f'{env_prefix}_SERVICE_HOST', ''),
                'port': os.environ.get(f'{env_prefix}_SERVICE_PORT', ''),
            }
            
            # Clean service name for object access (remove prefixes)
            clean_name = dep_name.replace('app-', '').replace('ui-', '').replace('infra-', '')
            deps_config[clean_name] = dep_config
        
        return deps_config

# Initialize Galaxy configuration
config = GalaxyConfig()

@app.get("/")
def read_root():
    """Root endpoint with service information"""
    return {
        "service": SERVICE_NAME,
        "tier": SERVICE_TIER,
        "team": SERVICE_TEAM,
        "description": "{{DESCRIPTION}}",
        "version": "1.0.0",
        "status": "healthy",
        "timestamp": datetime.now().isoformat()
    }

@app.get("/health")
def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "service": SERVICE_NAME,
        "tier": SERVICE_TIER,
        "team": SERVICE_TEAM,
        "timestamp": datetime.now().isoformat()
    }

@app.get("/api/info")
def api_info():
    """Service information endpoint"""
    return {
        "service": SERVICE_NAME,
        "type": "api-service",
        "tier": SERVICE_TIER,
        "team": SERVICE_TEAM,
        "status": "operational",
        "features": [
            "rest-api",
            "health-monitoring",
            "auto-documentation",
            "async-support"
        ],
        "endpoints": {
            "root": "/",
            "health": "/health", 
            "docs": "/docs",
            "openapi": "/openapi.json"
        }
    }

@app.get("/api/dependencies")
def dependencies_info():
    """Show loaded dependencies - demonstrates config.deps usage"""
    return {
        "service": SERVICE_NAME,
        "dependencies": config.deps,
        "dependency_count": len(config.deps),
        "example_usage": {
            "description": "Access dependencies via config.deps.{service_name}.{property}",
            "available_services": list(config.deps.keys()) if config.deps else [],
            "properties": ["name", "url", "host", "port"]
        },
        "timestamp": datetime.now().isoformat()
    }

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 3000))
    uvicorn.run(app, host="0.0.0.0", port=port)
